/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.seniru.tfm_mytribe;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 *
 * @author Seniru
 */
public class GUI extends javax.swing.JFrame {

    private MemberAnalyzer analyzer;
    private final ArrayList<Member> MEMBERS;
    private String[] displayGenders = new String[]{"male", "female", "none"};
    private String[] months = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    private String[] displayTitles;
    private HistoryProcessor histProc;
    private HistoryManager histMan;
    private ArrayList<String[]> displayLogs = new ArrayList<>();
    private Calendar histFrom = Calendar.getInstance();
    private Calendar histTo = Calendar.getInstance();

    /**
     * Creates new form GUI
     */
    public GUI() {
        Stats.init();
        try {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                analyzer = new MemberAnalyzer();
                histMan = new HistoryManager();
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParserConfigurationException | SAXException | ParseException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            histProc = new HistoryProcessor();
        } catch (IOException | ParserConfigurationException | SAXException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        MEMBERS = new ArrayList<>(analyzer.memberData.values());
        displayTitles = analyzer.getTitles();
        displayLogs = histMan.getTranslatedAndSeparatedLogs("ENG", "default");
        histFrom.setTimeInMillis(Info.getCreationTime().getTime());
        initComponents();
        initInfo();
        initMemberPage();
        initHistory();
        initStats();
        
        // extra styling of the UI
        tabPane.setBackgroundAt(0, Color.RED);
        tabPane.setBackgroundAt(1, Color.RED);
        tabPane.setBackgroundAt(2, Color.RED);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        infoPane = new javax.swing.JPanel();
        tribeImage = new javax.swing.JLabel();
        tName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        founder = new javax.swing.JLabel();
        leader = new javax.swing.JLabel();
        creation = new javax.swing.JLabel();
        totalMemberInfo = new javax.swing.JLabel();
        membersPane = new javax.swing.JPanel();
        genderPane = new javax.swing.JPanel();
        male = new javax.swing.JCheckBox();
        female = new javax.swing.JCheckBox();
        none = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        titleList = new javax.swing.JPanel();
        search = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        memberList = new javax.swing.JPanel();
        hash = new javax.swing.JTextField();
        jpanel = new javax.swing.JPanel();
        totalMemberM = new javax.swing.JLabel();
        resultedLength = new javax.swing.JLabel();
        historyPane = new javax.swing.JPanel();
        lUpdate = new javax.swing.JLabel();
        totalEntries = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        histTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        histSearch = new javax.swing.JTextField();
        beforeDays = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        fromYear = new javax.swing.JSpinner();
        fromMonth = new javax.swing.JComboBox<>();
        fromDate = new javax.swing.JComboBox<>();
        toYear = new javax.swing.JSpinner();
        toMonth = new javax.swing.JComboBox<>();
        toDate = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        mCountHolder = new javax.swing.JPanel();
        genderPanel = new javax.swing.JPanel();
        rankPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TFM My Tribe");

        tabPane.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        tabPane.setName("tabPane"); // NOI18N

        tribeImage.setToolTipText("");
        tribeImage.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tName.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        tName.setText("Tribe name");

        founder.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        founder.setText("Founder: ");

        leader.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        leader.setText("Leader: ");
        leader.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        creation.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        creation.setText("Created on:");

        totalMemberInfo.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        totalMemberInfo.setText("Total Members: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(totalMemberInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(creation, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(founder, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leader, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(leader, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(founder, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(creation, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalMemberInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout infoPaneLayout = new javax.swing.GroupLayout(infoPane);
        infoPane.setLayout(infoPaneLayout);
        infoPaneLayout.setHorizontalGroup(
            infoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPaneLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(infoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(infoPaneLayout.createSequentialGroup()
                        .addComponent(tribeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(tName, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(547, Short.MAX_VALUE))
        );
        infoPaneLayout.setVerticalGroup(
            infoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPaneLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(infoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tribeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(193, Short.MAX_VALUE))
        );

        tabPane.addTab("Info", infoPane);

        genderPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        male.setSelected(true);
        male.setText("Male");
        male.setActionCommand("male");
        male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleActionPerformed(evt);
            }
        });

        female.setSelected(true);
        female.setText("Female");
        female.setActionCommand("female");
        female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleActionPerformed(evt);
            }
        });

        none.setSelected(true);
        none.setText("None");
        none.setActionCommand("none");
        none.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneActionPerformed(evt);
            }
        });

        jSeparator2.setPreferredSize(new java.awt.Dimension(10, 2));

        titleList.setMinimumSize(new java.awt.Dimension(200, 100));
        titleList.setPreferredSize(new java.awt.Dimension(173, 320));
        titleList.setLayout(new java.awt.GridLayout(analyzer.getTitles().length, 0));

        javax.swing.GroupLayout genderPaneLayout = new javax.swing.GroupLayout(genderPane);
        genderPane.setLayout(genderPaneLayout);
        genderPaneLayout.setHorizontalGroup(
            genderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, genderPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(genderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(genderPaneLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(genderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(male)
                            .addComponent(female)
                            .addComponent(none))))
                .addGap(20, 20, 20))
        );
        genderPaneLayout.setVerticalGroup(
            genderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genderPaneLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(male)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(female)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(none)
                .addGap(20, 20, 20)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(titleList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        male.getAccessibleContext().setAccessibleDescription("");

        search.setText("Search...");
        search.setToolTipText("");
        search.setName(""); // NOI18N
        search.setPreferredSize(new java.awt.Dimension(65, 24));
        search.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchCaretUpdate(evt);
            }
        });
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });

        jLabel1.setText("#");

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setOpaque(false);
        jScrollPane2.setViewportView(memberList);

        memberList.setLayout(new java.awt.GridLayout(analyzer.memberData.size(), 0));
        jScrollPane2.setViewportView(memberList);

        hash.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                hashCaretUpdate(evt);
            }
        });
        hash.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hashMouseClicked(evt);
            }
        });

        jpanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        totalMemberM.setText("Total Members: ");

        resultedLength.setText("Total Members Resulted: ");

        javax.swing.GroupLayout jpanelLayout = new javax.swing.GroupLayout(jpanel);
        jpanel.setLayout(jpanelLayout);
        jpanelLayout.setHorizontalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(totalMemberM, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resultedLength, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpanelLayout.setVerticalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalMemberM, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(resultedLength))
                .addContainerGap())
        );

        javax.swing.GroupLayout membersPaneLayout = new javax.swing.GroupLayout(membersPane);
        membersPane.setLayout(membersPaneLayout);
        membersPaneLayout.setHorizontalGroup(
            membersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, membersPaneLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(membersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, membersPaneLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hash, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(genderPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        membersPaneLayout.setVerticalGroup(
            membersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(membersPaneLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(membersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genderPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(membersPaneLayout.createSequentialGroup()
                        .addGroup(membersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)
                        .addGap(18, 18, 18)
                        .addComponent(jpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabPane.addTab("Members", membersPane);

        lUpdate.setText("Last updated:");

        totalEntries.setText("Total entries: ");

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        histTable.setModel(new javax.swing.table.DefaultTableModel(
            histMan.getTranslatedAndSeparatedLogs("ENG", "default").stream().map(x -> new Object[] {DateUtils.milliToDate(x[0]), x[1]}).toArray(Object[][]::new),
            new String [] {
                "Time", "Logs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(histTable);
        histTable.getAccessibleContext().setAccessibleName("");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Search: ");

        histSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                histSearchCaretUpdate(evt);
            }
        });
        histSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                histSearchMouseClicked(evt);
            }
        });

        beforeDays.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        beforeDays.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All history", "Yesterday", "Last 3 days", "Last week", "Last month", "Last 5 months", "Last year" }));
        beforeDays.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                beforeDaysItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Results from: ");

        fromYear.setValue(histFrom.get(Calendar.YEAR)
        );
        fromYear.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fromYearStateChanged(evt);
            }
        });

        fromMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        fromMonth.setSelectedItem(months[histFrom.get(Calendar.MONTH)]
        );
        fromMonth.setMaximumSize(null);
        fromMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromMonthItemStateChanged(evt);
            }
        });

        fromDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        fromDate.setSelectedIndex(histFrom.get(Calendar.DATE) - 1
        );
        fromDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromDateItemStateChanged(evt);
            }
        });

        toYear.setValue(histTo.get(Calendar.YEAR)
        );
        toYear.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                toYearStateChanged(evt);
            }
        });

        toMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        toMonth.setSelectedIndex(histTo.get(Calendar.MONTH)
        );
        toMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                toMonthItemStateChanged(evt);
            }
        });

        toDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        toDate.setSelectedIndex(histTo.get(Calendar.DATE) - 1);
        toDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                toDateItemStateChanged(evt);
            }
        });

        jLabel4.setText("From:");

        jLabel5.setText("To:");

        javax.swing.GroupLayout historyPaneLayout = new javax.swing.GroupLayout(historyPane);
        historyPane.setLayout(historyPaneLayout);
        historyPaneLayout.setHorizontalGroup(
            historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(historyPaneLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(histSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 277, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(beforeDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(historyPaneLayout.createSequentialGroup()
                        .addGroup(historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalEntries, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(historyPaneLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toYear, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(toMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(historyPaneLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromYear, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fromMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        historyPaneLayout.setVerticalGroup(
            historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPaneLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(histSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beforeDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lUpdate)
                    .addComponent(fromYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalEntries)
                    .addGroup(historyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(toYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addGap(12, 12, 12))
        );

        tabPane.addTab("History", historyPane);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        javax.swing.GroupLayout mCountHolderLayout = new javax.swing.GroupLayout(mCountHolder);
        mCountHolder.setLayout(mCountHolderLayout);
        mCountHolderLayout.setHorizontalGroup(
            mCountHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );
        mCountHolderLayout.setVerticalGroup(
            mCountHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Member Count", mCountHolder);

        javax.swing.GroupLayout genderPanelLayout = new javax.swing.GroupLayout(genderPanel);
        genderPanel.setLayout(genderPanelLayout);
        genderPanelLayout.setHorizontalGroup(
            genderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );
        genderPanelLayout.setVerticalGroup(
            genderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Gender Stats", genderPanel);

        javax.swing.GroupLayout rankPanelLayout = new javax.swing.GroupLayout(rankPanel);
        rankPanel.setLayout(rankPanelLayout);
        rankPanelLayout.setHorizontalGroup(
            rankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );
        rankPanelLayout.setVerticalGroup(
            rankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Rank Stats", rankPanel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        tabPane.addTab("Statistics", jPanel2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        genderActionPerformed(evt);
    }//GEN-LAST:event_femaleActionPerformed

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
        genderActionPerformed(evt);

    }//GEN-LAST:event_maleActionPerformed

    private void noneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneActionPerformed
        genderActionPerformed(evt);
    }//GEN-LAST:event_noneActionPerformed

    private void searchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchCaretUpdate
        memberList.removeAll();
        try {
            var res = analyzer.searchMembers(search.getText(), hash.getText());
            res.forEach(x -> memberList.add(new MemberPanel(x)));
            resultedLength.setText("Total Members Resulted: " + res.size());
        } catch (IllegalArgumentException e) {
            if (e.getMessage().equals("Spaces are not allowed!")) {
                System.out.println(e.getMessage());
            }
        }
        repaint();
    }//GEN-LAST:event_searchCaretUpdate

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        search.setText("");
    }//GEN-LAST:event_searchMouseClicked

    private void hashMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hashMouseClicked
        hash.setText("");
    }//GEN-LAST:event_hashMouseClicked

    private void hashCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_hashCaretUpdate
        memberList.removeAll();
        try {
            var res = analyzer.searchMembers(search.getText(), hash.getText());
            res.forEach(x -> memberList.add(new MemberPanel(x)));
            resultedLength.setText("Total Members Resulted: " + res.size());
        } catch (IllegalArgumentException e) {
            if (e.getMessage().equals("Spaces are not allowed!")) {
                System.out.println(e.getMessage());
            }
        }
        repaint();
    }//GEN-LAST:event_hashCaretUpdate

    private void histSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_histSearchMouseClicked
        histSearch.setText("");
    }//GEN-LAST:event_histSearchMouseClicked

    private void histSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_histSearchCaretUpdate

        histTable.setModel(new javax.swing.table.DefaultTableModel(
                histMan.searchLogs("", histSearch.getText(), "ENG", displayLogs).stream().map(x -> new Object[]{DateUtils.milliToDate(x[0]), x[1]}).toArray(Object[][]::new),
                new String[]{
                    "Time", "Logs"
                }
        ) {
            boolean[] canEdit = {
                false, false
            };
        });
        repaint();


    }//GEN-LAST:event_histSearchCaretUpdate

    private void beforeDaysItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_beforeDaysItemStateChanged
        int before;
        switch (evt.getItem().toString().toLowerCase()) {
            case "all history":
                before = Integer.MAX_VALUE;
                histFrom.setTime(Info.getCreationTime());
                break;
            case "yesterday":
                before = HistoryManager.ONE_DAY;
                histFrom.setTimeInMillis(Duration.ofMillis(System.currentTimeMillis()).minusDays(1).toMillis());
                break;
            case "last 3 days":
                before = HistoryManager.THREE_DAY;
                histFrom.setTimeInMillis(Duration.ofMillis(System.currentTimeMillis()).minusDays(3).toMillis());
                break;
            case "last week":
                before = HistoryManager.ONE_WEEK;
                histFrom.setTimeInMillis(Duration.ofMillis(System.currentTimeMillis()).minusDays(7).toMillis());
                break;
            case "last month":
                before = HistoryManager.ONE_MONTH;
                histFrom.setTimeInMillis(Duration.ofMillis(System.currentTimeMillis()).minusDays(30).toMillis());
                break;
            case "last 5 months":
                before = HistoryManager.FIVE_MONTHS;
                histFrom.setTimeInMillis(Duration.ofMillis(System.currentTimeMillis()).minusDays(150).toMillis());
                break;
            case "last year":
                before = HistoryManager.ONE_YEAR;
                histFrom.setTimeInMillis(Duration.ofMillis(System.currentTimeMillis()).minusDays(365).toMillis());
                break;
            default:
                before = Integer.MAX_VALUE;
        }
        histTo.setTimeInMillis(System.currentTimeMillis());                
        displayLogs = histMan.getLogsBefore(before, "ENG");
        histTable.setModel(new javax.swing.table.DefaultTableModel(
                displayLogs.stream().map(x -> new Object[]{DateUtils.milliToDate(x[0]), x[1]}).toArray(Object[][]::new),
                new String[]{
                    "Time", "Logs"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false
            };
        });
        fromYear.setValue(histFrom.get(Calendar.YEAR));
        fromMonth.setSelectedIndex(histFrom.get(Calendar.MONTH));
        fromDate.setSelectedIndex(histFrom.get(Calendar.DATE) - 1);
        toYear.setValue(histTo.get(Calendar.YEAR));
        toMonth.setSelectedIndex(histTo.get(Calendar.MONTH));
        toDate.setSelectedIndex(histTo.get(Calendar.DATE) - 1);
        repaint();
    }//GEN-LAST:event_beforeDaysItemStateChanged

    private void fromYearStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fromYearStateChanged
        histFrom.set(Calendar.YEAR, Integer.parseInt(fromYear.getValue().toString()));
        displayLogsWithinRange(histFrom, histTo);
    }//GEN-LAST:event_fromYearStateChanged

    private void toYearStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_toYearStateChanged
        histTo.set(Calendar.YEAR, Integer.parseInt(toYear.getValue().toString()));
        displayLogsWithinRange(histFrom, histTo);
    }//GEN-LAST:event_toYearStateChanged

    private void fromMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromMonthItemStateChanged
        histFrom.set(Calendar.MONTH, fromMonth.getSelectedIndex());
        displayLogsWithinRange(histFrom, histTo);
    }//GEN-LAST:event_fromMonthItemStateChanged

    private void toMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_toMonthItemStateChanged
        histTo.set(Calendar.MONTH, toMonth.getSelectedIndex());
        displayLogsWithinRange(histFrom, histTo);
    }//GEN-LAST:event_toMonthItemStateChanged

    private void fromDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromDateItemStateChanged
        histFrom.set(Calendar.DATE, fromDate.getSelectedIndex());
        displayLogsWithinRange(histFrom, histTo);
    }//GEN-LAST:event_fromDateItemStateChanged

    private void toDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_toDateItemStateChanged
        histTo.set(Calendar.DATE, toDate.getSelectedIndex());
        displayLogsWithinRange(histFrom, histTo);
    }//GEN-LAST:event_toDateItemStateChanged

    private void initInfo() {
        
        try { 
            tribeImage.setIcon(new ImageIcon(new URL(Info.getIcon())));
        } catch (MalformedURLException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        tName.setText(Info.getTName());
        leader.setText("Leader: " + Info.getTLeader());
        founder.setText("Founder: " + Info.getTFounder());
        creation.setText("Created on: " + Info.getCreationTime().toString());
        totalMemberInfo.setText("Total members: " + analyzer.memberData.size());
        totalMemberM.setText("Total Members: " + analyzer.memberData.size());
        resultedLength.setText("Total Members Resulted: " + analyzer.memberData.size());
        totalEntries.setText("Total entries: " + histProc.getStoredLogs().size());
        lUpdate.setText("Last updated: " + Info.getLastUpdateTime());
    }

    private void initMemberPage() {
        for (var title : analyzer.getTitles()) {
            var c = new JCheckBox(title, true);
            c.setActionCommand(title);
            c.addActionListener(x -> {

                //displayMembers = analyzer.getAccordingToTitles(displayMembers, Arrays.stream(titleList.getComponents()).filter(y -> ((JCheckBox)y).isSelected()).map(y -> ((JCheckBox) y).getActionCommand()).toArray(String[]::new));
                memberList.removeAll();
                //displayMembers.forEach(y -> memberList.add(new MemberPanel(y)));
                displayTitles = Arrays.stream(titleList.getComponents()).filter(y -> y instanceof JCheckBox && ((JCheckBox) y).isSelected()).map(y -> ((JCheckBox) y).getActionCommand()).toArray(String[]::new);
                var res = analyzer.getAccordingToGenders(analyzer.getAccordingToTitles(MEMBERS, displayTitles), displayGenders);
                res.forEach(y -> memberList.add(new MemberPanel(y)));
                resultedLength.setText("Total Members Resulted: " + res.size());
                repaint();
            });
            titleList.add(c);
        }
        analyzer.memberData.values().forEach((Member x1) -> {
            com.seniru.tfm_mytribe.MemberPanel mPanel = new MemberPanel(x1);
            memberList.add(new MemberPanel(x1));
        });
    }

    private void initHistory() {
        histFrom.setTime(Info.getCreationTime());
        histTo.setTime(new Date(System.currentTimeMillis()));

    }
    
    private void initStats() {
        mCountHolder.setLayout(new FlowLayout());
        mCountHolder.add(Stats.getMemberStats());
        genderPanel.setLayout(new FlowLayout());
        genderPanel.add(Stats.getGenderComparisonPanel());
        rankPanel.setLayout(new FlowLayout());
        rankPanel.add(Stats.getRankComparisonPanel());
    }

    private void genderActionPerformed(ActionEvent evt) {
        memberList.removeAll();
        //displayMembers.removeAll(MEMBERS);
        //displayMembers.addAll(analyzer.getAccordingToGenders(displayMembers, Arrays.stream(genderPane.getComponents()).filter(x -> x instanceof JCheckBox && ((JCheckBox)x).isSelected()).map(x -> ((JCheckBox) x).getActionCommand()).toArray(String[]::new)));
        //displayMembers.forEach(x -> memberList.add(new MemberPanel(x)));
        displayGenders = Arrays.stream(genderPane.getComponents()).filter(y -> y instanceof JCheckBox && ((JCheckBox) y).isSelected()).map(y -> ((JCheckBox) y).getActionCommand()).toArray(String[]::new);
        var res = analyzer.getAccordingToGenders(analyzer.getAccordingToTitles(MEMBERS, displayTitles), displayGenders);
        res.forEach(y -> memberList.add(new MemberPanel(y)));
        resultedLength.setText("Total Members Resulted: " + res.size());
        repaint();
    }
    
    private void displayLogsWithinRange(Calendar from, Calendar to) {
        displayLogs = histMan.getLogsWithinRange(from, to, "ENG");
        histTable.setModel(new javax.swing.table.DefaultTableModel(
                displayLogs.stream().map(x -> new Object[]{DateUtils.milliToDate(x[0]), x[1]}).toArray(Object[][]::new),
                new String[]{
                    "Time", "Logs"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false
            };
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> beforeDays;
    private javax.swing.JLabel creation;
    public javax.swing.JCheckBox female;
    private javax.swing.JLabel founder;
    private javax.swing.JComboBox<String> fromDate;
    private javax.swing.JComboBox<String> fromMonth;
    private javax.swing.JSpinner fromYear;
    private javax.swing.JPanel genderPane;
    private javax.swing.JPanel genderPanel;
    private javax.swing.JTextField hash;
    private javax.swing.JTextField histSearch;
    private javax.swing.JTable histTable;
    private javax.swing.JPanel historyPane;
    private javax.swing.JPanel infoPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jpanel;
    private javax.swing.JLabel lUpdate;
    private javax.swing.JLabel leader;
    private javax.swing.JPanel mCountHolder;
    public javax.swing.JCheckBox male;
    private javax.swing.JPanel memberList;
    private javax.swing.JPanel membersPane;
    public javax.swing.JCheckBox none;
    private javax.swing.JPanel rankPanel;
    private javax.swing.JLabel resultedLength;
    private javax.swing.JTextField search;
    private javax.swing.JLabel tName;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JPanel titleList;
    private javax.swing.JComboBox<String> toDate;
    private javax.swing.JComboBox<String> toMonth;
    private javax.swing.JSpinner toYear;
    private javax.swing.JLabel totalEntries;
    private javax.swing.JLabel totalMemberInfo;
    private javax.swing.JLabel totalMemberM;
    private javax.swing.JLabel tribeImage;
    // End of variables declaration//GEN-END:variables
}
